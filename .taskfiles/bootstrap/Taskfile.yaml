---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  genconfig:
    desc: Generate cluster configurations via Talhelper
    cmds:
      - talhelper genconfig --config-file talos/talconfig.yaml --secret-file talos/talsecret.sops.yaml --out-dir talos/clusterconfig/
      - cp talos/clusterconfig/talosconfig talosconfig

  talos:
    desc: Bootstrap Talos
    cmds:
      - for: { var: TALOS_NODES }
        cmd: >
          talhelper gencommand --config-file talos/talconfig.yaml --out-dir talos/clusterconfig/ apply --node {{.ITEM}} --extra-flags --insecure | sh
      - until talosctl --talosconfig talosconfig --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl --talosconfig talosconfig kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name main "$(basename "${KUBECONFIG}")" &>/dev/null
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --talosconfig talosconfig --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      TALOS_NODES:
        sh: ls talos/clusterconfig/*.yaml | sed 's|talos/clusterconfig/||; s/^{{.CLUSTER}}-//; s/\.yaml$//'
    preconditions:
      - test -f talos/clusterconfig/talosconfig
      - talosctl config info --talosconfig talosconfig
      - test -f talosconfig
      - which jq ls sops talosctl shuf talhelper

  apps:
    desc: Bootstrap Apps
    cmds:
      - until kubectl --kubeconfig kubeconfig wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
      - for: { var: CRDS }
        cmd: kubectl apply --server-side --filename {{.ITEM}}
      - for: { var: TEMPLATES }
        cmd: op run --env-file bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl apply --server-side --filename -
      - helmfile --file bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl --kubeconfig kubeconfig wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    vars:
      CRDS:
        # renovate: datasource=github-releases depName=kubernetes-sigs/external-dns
        - https://raw.githubusercontent.com/kubernetes-sigs/external-dns/refs/tags/v0.17.0/config/crd/standard/dnsendpoint.yaml
        # renovate: datasource=github-releases depName=kubernetes-sigs/gateway-api
        - https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/experimental-install.yaml
        # renovate: datasource=github-releases depName=prometheus-operator/prometheus-operator
        - https://github.com/prometheus-operator/prometheus-operator/releases/download/v0.83.0/stripped-down-crds.yaml
      TEMPLATES:
        sh: ls bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}{{.CLUSTER}}{{end}}' # ¯\_(ツ)_/¯
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSL https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
    preconditions:
      - op user get --me
      - talosctl --talosconfig talosconfig config info
      - test -f talosconfig
      - test -f kubeconfig
      - test -f bootstrap/apps/helmfile.yaml
      - which helmfile kubectl curl flux jq ls op

  flux:
    desc: Bootstrap Flux
      - kubectl apply --server-side --kustomize flux/config
