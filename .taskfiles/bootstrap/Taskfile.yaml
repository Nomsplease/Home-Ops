---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  genconfig:
    desc: Generate cluster configurations via Talhelper
    cmds:
      - talhelper genconfig --config-file talos/talconfig.yaml --secret-file talos/talsecret.sops.yaml --out-dir talos/clusterconfig/
      - cp talos/clusterconfig/talosconfig talosconfig

  talos:
    desc: Bootstrap Talos
    cmds:
      - for: { var: TALOS_NODES }
        cmd: >
          talhelper gencommand --config-file talos/talconfig.yaml --out-dir talos/clusterconfig/ apply --node {{.ITEM}} --extra-flags --insecure | sh
      - until talosctl --talosconfig talosconfig --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl --talosconfig talosconfig kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name main "$(basename "${KUBECONFIG}")" &>/dev/null
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --talosconfig talosconfig --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      TALOS_NODES:
        sh: ls talos/clusterconfig/*.yaml | sed 's|talos/clusterconfig/||; s/^{{.CLUSTER}}-//; s/\.yaml$//'
    preconditions:
      - test -f talos/clusterconfig/talosconfig
      - talosctl config info --talosconfig talosconfig
      - test -f talosconfig
      - which jq ls sops talosctl shuf talhelper

  namespaces:
    desc: Create Namespaces
    cmds:
      - for: { var: DIR }
        cmd: >
          kustomize build {{.ITEM}} | yq -e 'select(.kind == "Namespace")' | kubectl apply --server-side --field-manager bootstrap --force-conflicts -f -
    vars:
      DIR:
        sh: find "kubernetes/apps" -mindepth 1 -maxdepth 1 -type d
    preconditions:
      - which kubectl kustomize yq
      - kubectl get nodes

  resources:
    desc: Apply Resources
    cmds:
      - op inject -i bootstrap/resources.yaml.j2 | kubectl apply --server-side --field-manager bootstrap --force-conflicts -f -
    preconditions:
      - which kubectl op
      - kubectl get nodes
     
  crds:
    desc: Apply Helmfile CRDs
    cmds:
      - helmfile -f "bootstrap/helmfile.d/00-crds.yaml" template -q | kubectl apply --server-side --field-manager bootstrap --force-conflicts -f -
    preconditions:
      - which kubectl helmfile
      - kubectl get nodes
  
  apps:
    desc: Apply Helmfile APPs
    cmds:
      - helmfile -f "bootstrap/helmfile.d/01-apps.yaml" sync --hide-notes
    preconditions:
      - which kubectl helmfile
      - kubectl get nodes

  flux:
    desc: Bootstrap Flux
      - kubectl apply --server-side --kustomize flux/config
