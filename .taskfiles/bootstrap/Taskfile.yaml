---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

tasks:

  genconfig:
    desc: Generate cluster configurations via Talhelper [CLUSTER=main]
    cmds:
      - talhelper genconfig --config-file {{.CLUSTER_DIR}}/talos/talconfig.yaml --secret-file {{.CLUSTER_DIR}}/talos/talsecret.sops.yaml --out-dir {{.CLUSTER_DIR}}/talos/clusterconfig/
      - cp {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig {{.CLUSTER_DIR}}/talosconfig

  talos:
    desc: Bootstrap Talos [CLUSTER=main]
    cmds:
      - for: { var: TALOS_NODES }
        cmd: >
          talhelper gencommand --config-file {{.CLUSTER_DIR}}/talos/talconfig.yaml --out-dir {{.CLUSTER_DIR}}/talos/clusterconfig/ apply --node {{.ITEM}} --extra-flags --insecure | sh
      - until talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig --nodes {{.TALOS_CONTROLLER}} bootstrap; do sleep 5; done
      - talosctl --talosconfig {{.CLUSTER_DIR}}/talosconfig kubeconfig --nodes {{.TALOS_CONTROLLER}} --force --force-context-name {{.CLUSTER}} {{.CLUSTER_DIR}}
    vars:
      TALOS_CONTROLLER:
        sh: talosctl config info --talosconfig {{.CLUSTER_DIR}}/talosconfig --output json | jq --raw-output '.endpoints[]' | shuf -n 1
      TALOS_NODES:
        sh: ls {{.CLUSTER_DIR}}/talos/clusterconfig/*.yaml | sed 's|{{.CLUSTER_DIR}}/talos/clusterconfig/||; s/^{{.CLUSTER}}-//; s/\.yaml$//'
    requires:
      vars: [CLUSTER]
    preconditions:
      - test -f {{.CLUSTER_DIR}}/talos/clusterconfig/talosconfig
      - talosctl config info --talosconfig {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - which jq ls sops talosctl shuf talhelper

  apps:
    desc: Bootstrap Apps [CLUSTER=main]
    cmds:
      - until kubectl wait nodes --for=condition=Ready=False --all --timeout=10m; do sleep 5; done
      - helmfile --file {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml apply --skip-diff-on-install --suppress-diff
      - until kubectl wait nodes --for=condition=Ready --all --timeout=10m; do sleep 5; done
    requires:
      vars: [CLUSTER]
    preconditions:
      - talosctl config info
      - test -f {{.CLUSTER_DIR}}/talosconfig
      - test -f {{.CLUSTER_DIR}}/bootstrap/apps/helmfile.yaml
      - which helmfile kubectl

  flux:
    desc: Bootstrap Flux [CLUSTER=main]
    cmds:
      - for: { var: TEMPLATES }
        cmd: op run --env-file {{.CLUSTER_DIR}}/bootstrap/bootstrap.env --no-masking -- minijinja-cli {{.ITEM}} | kubectl apply --server-side --filename -
      - kubectl apply --server-side --kustomize {{.CLUSTER_DIR}}/flux/config
    vars:
      TEMPLATES:
        sh: ls {{.CLUSTER_DIR}}/bootstrap/apps/*.j2
    env:
      VAULT: '{{if eq .CLUSTER "main"}}kubernetes{{else}}{{.CLUSTER}}{{end}}' # ¯\_(ツ)_/¯
      FLUX_GITHUB_PUBLIC_KEYS:
        sh: curl -fsSL https://api.github.com/meta | jq --raw-output '"github.com "+.ssh_keys[]'
    requires:
      vars: [CLUSTER]
    preconditions:
      - op user get --me
      - which curl flux jq kubectl ls op
