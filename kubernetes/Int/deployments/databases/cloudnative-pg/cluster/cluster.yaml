---
# yaml-language-server: $schema=https://kubernetes-schemas.pages.dev/postgresql.cnpg.io/cluster_v1.json
apiVersion: postgresql.cnpg.io/v1
kind: Cluster
metadata:
  name: cnpg-cluster
spec:
  instances: 3
  imageName: ghcr.io/tensorchord/cloudnative-pgvecto.rs:16.3-v0.2.1
  primaryUpdateStrategy: unsupervised
  storage:
    pvcTemplate:
      accessModes:
        - ReadWriteMany
      resources:
        requests:
          storage: 50Gi
      storageClassName: ceph-filesystem
      volumeMode: Filesystem
  superuserSecret:
    name: cloudnative-pg-secret
  enableSuperuserAccess: true

  postgresql:
    parameters:
      max_connections: "400"
      shared_buffers: 256MB

  resources:
    requests:
      cpu: 500m
    limits:
      memory: 8Gi

  monitoring:
    enablePodMonitor: true

  backup:
    retentionPolicy: 30d
    barmanObjectStore: &barmanObjectStore
      data:
        compression: bzip2
      wal:
        compression: bzip2
        maxParallel: 8
      destinationPath: s3://cloudnative-pg/
      endpointURL: https://s3.int.noms.tv
      # Note: serverName version needs to be inclemented
      # when recovering from an existing cnpg cluster
      serverName: &currentCluster cnpg-cluster-v1
      s3Credentials:
        accessKeyId:
          name: cloudnative-pg-secret
          key: aws-access-key-id
        secretAccessKey:
          name: cloudnative-pg-secret
          key: aws-secret-access-key

  # # Note: previousCluster needs to be set to the name of the previous
  # # cluster when recovering from an existing cnpg cluster
  # bootstrap:
    # recovery:
    #   source: &previousCluster "${APP}-cnpg-db-${CNPG_DB_PREVIOUS_VERSION:-v1}"
    #   database: app
    #   owner: app
    #   secret:
    #     name: "${APP}-db-secrets"

  # # Note: externalClusters is needed when recovering from an existing cnpg cluster
  # externalClusters:
  #   - name: *previousCluster
  #     barmanObjectStore:
  #       <<: *barmanObjectStore
  #       serverName: *previousCluster
